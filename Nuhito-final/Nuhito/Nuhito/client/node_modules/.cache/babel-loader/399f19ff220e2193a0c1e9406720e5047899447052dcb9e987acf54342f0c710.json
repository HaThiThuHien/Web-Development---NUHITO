{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\n// import axios from 'axios'\n\nfunction UserAPI(token) {\n  _s();\n  const [isLogged, setIsLogged] = useState(false);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [cart, setCart] = useState([]);\n  const [wishlist, setWishlist] = useState([]);\n  const [history, setHistory] = useState([]);\n  useEffect(() => {\n    if (token) {\n      const getUser = async () => {\n        try {\n          const res = await fetch('/user/infor', {\n            headers: {\n              Authorization: token\n            }\n          });\n          const data = await res.json();\n          setIsLogged(true);\n          data.role === 1 ? setIsAdmin(true) : setIsAdmin(false);\n          setCart(data.cart);\n          setWishlist(data.wishlist);\n        } catch (err) {\n          alert(err.message);\n        }\n      };\n      getUser();\n    }\n  }, [token]);\n  const addCart = async (product, number) => {\n    if (!isLogged) return alert(\"Please login to continue buying\");\n    const check = cart.every(item => {\n      return item._id !== product._id;\n    });\n    if (check) {\n      setCart([...cart, {\n        ...product,\n        quantity: number\n      }]);\n      const response = await fetch('/user/addcart', {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': token\n        },\n        body: JSON.stringify({\n          cart: [...cart, {\n            ...product,\n            quantity: number\n          }]\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      } else {\n        alert(\"Added to cart successfully!\");\n      }\n    } else {\n      alert(\"This product has been added to cart.\");\n    }\n  };\n  const addWishlist = async product => {\n    if (!isLogged) return alert(\"Please login to continue\");\n    const check = wishlist.every(item => {\n      return item._id !== product._id;\n    });\n    if (check) {\n      setWishlist([...wishlist, {\n        ...product\n      }]);\n      const response = await fetch('/user/addwishlist', {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': token\n        },\n        body: JSON.stringify({\n          wishlist: [...wishlist, {\n            ...product\n          }]\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      } else {\n        alert(\"Added to wishlist successfully!\");\n      }\n    } else {\n      alert(\"This product has been added to wishlist.\");\n    }\n  };\n  return {\n    isLogged: [isLogged, setIsLogged],\n    isAdmin: [isAdmin, setIsAdmin],\n    cart: [cart, setCart],\n    addCart: addCart,\n    wishlist: [wishlist, setWishlist],\n    addWishlist: addWishlist,\n    history: [history, setHistory]\n  };\n}\n_s(UserAPI, \"KzSYsI6pE9y+K5elPwgeW87ciuI=\");\n_c = UserAPI;\nexport default UserAPI;\nvar _c;\n$RefreshReg$(_c, \"UserAPI\");","map":{"version":3,"names":["useState","useEffect","UserAPI","token","_s","isLogged","setIsLogged","isAdmin","setIsAdmin","cart","setCart","wishlist","setWishlist","history","setHistory","getUser","res","fetch","headers","Authorization","data","json","role","err","alert","message","addCart","product","number","check","every","item","_id","quantity","response","method","body","JSON","stringify","ok","Error","addWishlist","_c","$RefreshReg$"],"sources":["D:/WEB/Nuhito/client/src/api/UserAPI.js"],"sourcesContent":["import {useState, useEffect} from 'react'\r\n// import axios from 'axios'\r\n\r\nfunction UserAPI(token) {\r\n    const [isLogged, setIsLogged] = useState(false)\r\n    const [isAdmin, setIsAdmin] = useState(false)\r\n    const [cart, setCart] = useState([])\r\n    const [wishlist, setWishlist] = useState([])\r\n    const [history, setHistory] = useState([])\r\n\r\n    useEffect(() =>{\r\n        if(token){\r\n            const getUser = async () => {\r\n                try {\r\n                    const res = await fetch('/user/infor', {\r\n                        headers: {Authorization: token}\r\n                    });\r\n                    const data = await res.json();\r\n            \r\n                    setIsLogged(true);\r\n                    data.role === 1 ? setIsAdmin(true) : setIsAdmin(false);\r\n            \r\n                    setCart(data.cart);\r\n                    setWishlist(data.wishlist);\r\n            \r\n                } catch (err) {\r\n                    alert(err.message);\r\n                }\r\n            }            \r\n            getUser()\r\n            \r\n        }\r\n    },[token])\r\n\r\n    const addCart = async (product, number) => {\r\n        if(!isLogged) return alert(\"Please login to continue buying\")\r\n\r\n        const check = cart.every(item =>{\r\n            return item._id !== product._id\r\n        })\r\n\r\n        if(check){\r\n            setCart([...cart, {...product, quantity: number}])\r\n        \r\n            const response = await fetch('/user/addcart', {\r\n                method: 'PATCH',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': token\r\n                },\r\n                body: JSON.stringify({cart: [...cart, {...product, quantity: number}]})\r\n            });\r\n        \r\n            if (!response.ok) {\r\n                throw new Error('Network response was not ok');\r\n            } else {\r\n                alert(\"Added to cart successfully!\");\r\n            }\r\n        }\r\n        else{\r\n            alert(\"This product has been added to cart.\")\r\n        }\r\n    }\r\n\r\n    const addWishlist = async (product) => {\r\n        if(!isLogged) return alert(\"Please login to continue\")\r\n\r\n        const check = wishlist.every(item =>{\r\n            return item._id !== product._id\r\n        })\r\n\r\n        if(check){\r\n            setWishlist([...wishlist, {...product}])\r\n        \r\n            const response = await fetch('/user/addwishlist', {\r\n                method: 'PATCH',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': token\r\n                },\r\n                body: JSON.stringify({wishlist: [...wishlist, {...product}]})\r\n            });\r\n        \r\n            if (!response.ok) {\r\n                throw new Error('Network response was not ok');\r\n            } else {\r\n                alert(\"Added to wishlist successfully!\");\r\n            }\r\n        }\r\n        else{\r\n            alert(\"This product has been added to wishlist.\")\r\n        }\r\n    }\r\n\r\n    return {\r\n        isLogged: [isLogged, setIsLogged],\r\n        isAdmin: [isAdmin, setIsAdmin],\r\n        cart: [cart, setCart],\r\n        addCart: addCart,\r\n        wishlist: [wishlist, setWishlist],\r\n        addWishlist: addWishlist,\r\n        history: [history, setHistory]\r\n    }\r\n}\r\n\r\nexport default UserAPI\r\n "],"mappings":";AAAA,SAAQA,QAAQ,EAAEC,SAAS,QAAO,OAAO;AACzC;;AAEA,SAASC,OAAOA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACpB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACS,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAE1CC,SAAS,CAAC,MAAK;IACX,IAAGE,KAAK,EAAC;MACL,MAAMY,OAAO,GAAG,MAAAA,CAAA,KAAY;QACxB,IAAI;UACA,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,aAAa,EAAE;YACnCC,OAAO,EAAE;cAACC,aAAa,EAAEhB;YAAK;UAClC,CAAC,CAAC;UACF,MAAMiB,IAAI,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,CAAC;UAE7Bf,WAAW,CAAC,IAAI,CAAC;UACjBc,IAAI,CAACE,IAAI,KAAK,CAAC,GAAGd,UAAU,CAAC,IAAI,CAAC,GAAGA,UAAU,CAAC,KAAK,CAAC;UAEtDE,OAAO,CAACU,IAAI,CAACX,IAAI,CAAC;UAClBG,WAAW,CAACQ,IAAI,CAACT,QAAQ,CAAC;QAE9B,CAAC,CAAC,OAAOY,GAAG,EAAE;UACVC,KAAK,CAACD,GAAG,CAACE,OAAO,CAAC;QACtB;MACJ,CAAC;MACDV,OAAO,CAAC,CAAC;IAEb;EACJ,CAAC,EAAC,CAACZ,KAAK,CAAC,CAAC;EAEV,MAAMuB,OAAO,GAAG,MAAAA,CAAOC,OAAO,EAAEC,MAAM,KAAK;IACvC,IAAG,CAACvB,QAAQ,EAAE,OAAOmB,KAAK,CAAC,iCAAiC,CAAC;IAE7D,MAAMK,KAAK,GAAGpB,IAAI,CAACqB,KAAK,CAACC,IAAI,IAAG;MAC5B,OAAOA,IAAI,CAACC,GAAG,KAAKL,OAAO,CAACK,GAAG;IACnC,CAAC,CAAC;IAEF,IAAGH,KAAK,EAAC;MACLnB,OAAO,CAAC,CAAC,GAAGD,IAAI,EAAE;QAAC,GAAGkB,OAAO;QAAEM,QAAQ,EAAEL;MAAM,CAAC,CAAC,CAAC;MAElD,MAAMM,QAAQ,GAAG,MAAMjB,KAAK,CAAC,eAAe,EAAE;QAC1CkB,MAAM,EAAE,OAAO;QACfjB,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAEf;QACrB,CAAC;QACDiC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAC7B,IAAI,EAAE,CAAC,GAAGA,IAAI,EAAE;YAAC,GAAGkB,OAAO;YAAEM,QAAQ,EAAEL;UAAM,CAAC;QAAC,CAAC;MAC1E,CAAC,CAAC;MAEF,IAAI,CAACM,QAAQ,CAACK,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAClD,CAAC,MAAM;QACHhB,KAAK,CAAC,6BAA6B,CAAC;MACxC;IACJ,CAAC,MACG;MACAA,KAAK,CAAC,sCAAsC,CAAC;IACjD;EACJ,CAAC;EAED,MAAMiB,WAAW,GAAG,MAAOd,OAAO,IAAK;IACnC,IAAG,CAACtB,QAAQ,EAAE,OAAOmB,KAAK,CAAC,0BAA0B,CAAC;IAEtD,MAAMK,KAAK,GAAGlB,QAAQ,CAACmB,KAAK,CAACC,IAAI,IAAG;MAChC,OAAOA,IAAI,CAACC,GAAG,KAAKL,OAAO,CAACK,GAAG;IACnC,CAAC,CAAC;IAEF,IAAGH,KAAK,EAAC;MACLjB,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAE;QAAC,GAAGgB;MAAO,CAAC,CAAC,CAAC;MAExC,MAAMO,QAAQ,GAAG,MAAMjB,KAAK,CAAC,mBAAmB,EAAE;QAC9CkB,MAAM,EAAE,OAAO;QACfjB,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAEf;QACrB,CAAC;QACDiC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAC3B,QAAQ,EAAE,CAAC,GAAGA,QAAQ,EAAE;YAAC,GAAGgB;UAAO,CAAC;QAAC,CAAC;MAChE,CAAC,CAAC;MAEF,IAAI,CAACO,QAAQ,CAACK,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAClD,CAAC,MAAM;QACHhB,KAAK,CAAC,iCAAiC,CAAC;MAC5C;IACJ,CAAC,MACG;MACAA,KAAK,CAAC,0CAA0C,CAAC;IACrD;EACJ,CAAC;EAED,OAAO;IACHnB,QAAQ,EAAE,CAACA,QAAQ,EAAEC,WAAW,CAAC;IACjCC,OAAO,EAAE,CAACA,OAAO,EAAEC,UAAU,CAAC;IAC9BC,IAAI,EAAE,CAACA,IAAI,EAAEC,OAAO,CAAC;IACrBgB,OAAO,EAAEA,OAAO;IAChBf,QAAQ,EAAE,CAACA,QAAQ,EAAEC,WAAW,CAAC;IACjC6B,WAAW,EAAEA,WAAW;IACxB5B,OAAO,EAAE,CAACA,OAAO,EAAEC,UAAU;EACjC,CAAC;AACL;AAACV,EAAA,CApGQF,OAAO;AAAAwC,EAAA,GAAPxC,OAAO;AAsGhB,eAAeA,OAAO;AAAA,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}